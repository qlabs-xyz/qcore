// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qcore/pool/tribute.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Message to set the minting for tribute
type Tribute struct {
	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator          string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	ContractAddress  string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	RecipientAddress string `protobuf:"bytes,4,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	Amount           uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Tribute) Reset()         { *m = Tribute{} }
func (m *Tribute) String() string { return proto.CompactTextString(m) }
func (*Tribute) ProtoMessage()    {}
func (*Tribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f3e453cdc34e935, []int{0}
}
func (m *Tribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tribute.Merge(m, src)
}
func (m *Tribute) XXX_Size() int {
	return m.Size()
}
func (m *Tribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Tribute.DiscardUnknown(m)
}

var xxx_messageInfo_Tribute proto.InternalMessageInfo

func (m *Tribute) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tribute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Tribute) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *Tribute) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *Tribute) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Tribute)(nil), "qcore.pool.Tribute")
}

func init() { proto.RegisterFile("qcore/pool/tribute.proto", fileDescriptor_5f3e453cdc34e935) }

var fileDescriptor_5f3e453cdc34e935 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x31, 0x4e, 0xc3, 0x40,
	0x10, 0x45, 0xbd, 0x26, 0x24, 0x62, 0x0a, 0x08, 0x5b, 0xa0, 0xad, 0x56, 0x11, 0x95, 0x11, 0xc2,
	0x2e, 0x38, 0x01, 0x39, 0x42, 0x44, 0x45, 0x83, 0xec, 0xdd, 0x11, 0xac, 0x44, 0x3c, 0x66, 0x3c,
	0x96, 0xe0, 0x16, 0xdc, 0x81, 0xcb, 0x50, 0xa6, 0xa4, 0x44, 0xf6, 0x45, 0x10, 0xeb, 0x98, 0x34,
	0x23, 0xcd, 0x7b, 0xaf, 0xf9, 0x60, 0x5e, 0x1d, 0x31, 0x16, 0x0d, 0xd1, 0x4b, 0x21, 0x1c, 0xaa,
	0x4e, 0x30, 0x6f, 0x98, 0x84, 0x34, 0x44, 0x93, 0xff, 0x99, 0xcb, 0x4f, 0x05, 0x8b, 0xfb, 0xd1,
	0xea, 0x53, 0x48, 0x83, 0x37, 0x6a, 0xa5, 0xb2, 0x93, 0x4d, 0x1a, 0xbc, 0x36, 0xb0, 0x70, 0x8c,
	0xa5, 0x10, 0x9b, 0x34, 0xc2, 0xe9, 0xd5, 0x57, 0xb0, 0x74, 0x54, 0x0b, 0x97, 0x4e, 0x1e, 0x4b,
	0xef, 0x19, 0xdb, 0xd6, 0x1c, 0xc5, 0xe4, 0x6c, 0xe2, 0x77, 0x23, 0xd6, 0xd7, 0x70, 0xce, 0xe8,
	0x42, 0x13, 0xb0, 0x3e, 0xb4, 0xb3, 0xd8, 0x2e, 0xff, 0xc5, 0x14, 0x5f, 0xc0, 0xbc, 0xdc, 0x52,
	0x57, 0x8b, 0x39, 0x5e, 0xa9, 0x6c, 0xb6, 0xd9, 0x7f, 0xeb, 0xf5, 0x57, 0x6f, 0xd5, 0xae, 0xb7,
	0xea, 0xa7, 0xb7, 0xea, 0x63, 0xb0, 0xc9, 0x6e, 0xb0, 0xc9, 0xf7, 0x60, 0x93, 0x87, 0xec, 0x29,
	0xc8, 0x73, 0x57, 0xe5, 0x8e, 0xb6, 0x05, 0x75, 0x52, 0xe1, 0x78, 0x6f, 0x6a, 0xf2, 0x58, 0xbc,
	0xed, 0xd7, 0xbf, 0x37, 0xd8, 0x56, 0xf3, 0x38, 0xfe, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x87,
	0xcd, 0xb9, 0x08, 0x18, 0x01, 0x00, 0x00,
}

func (m *Tribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTribute(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintTribute(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTribute(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTribute(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTribute(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTribute(dAtA []byte, offset int, v uint64) int {
	offset -= sovTribute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTribute(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTribute(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTribute(uint64(l))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovTribute(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTribute(uint64(m.Amount))
	}
	return n
}

func sovTribute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTribute(x uint64) (n int) {
	return sovTribute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTribute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTribute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTribute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTribute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTribute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTribute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTribute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTribute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTribute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTribute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTribute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTribute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTribute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTribute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTribute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTribute = fmt.Errorf("proto: unexpected end of group")
)
