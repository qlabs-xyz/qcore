// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qcore/pool/supply.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Supply struct {
	TotalSupply string `protobuf:"bytes,1,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
}

func (m *Supply) Reset()         { *m = Supply{} }
func (m *Supply) String() string { return proto.CompactTextString(m) }
func (*Supply) ProtoMessage()    {}
func (*Supply) Descriptor() ([]byte, []int) {
	return fileDescriptor_210de5b6b7a238f7, []int{0}
}
func (m *Supply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Supply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Supply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Supply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply.Merge(m, src)
}
func (m *Supply) XXX_Size() int {
	return m.Size()
}
func (m *Supply) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply.DiscardUnknown(m)
}

var xxx_messageInfo_Supply proto.InternalMessageInfo

func (m *Supply) GetTotalSupply() string {
	if m != nil {
		return m.TotalSupply
	}
	return ""
}

func init() {
	proto.RegisterType((*Supply)(nil), "qcore.pool.Supply")
}

func init() { proto.RegisterFile("qcore/pool/supply.proto", fileDescriptor_210de5b6b7a238f7) }

var fileDescriptor_210de5b6b7a238f7 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x8f, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x37, 0x97, 0x82, 0xab, 0xa7, 0x22, 0x28, 0x45, 0x82, 0x7a, 0x2a, 0x8a, 0x3b, 0x14,
	0xdf, 0xa0, 0x8f, 0xa0, 0x37, 0x2f, 0x92, 0xac, 0x43, 0x5c, 0xd8, 0xe6, 0x4f, 0x37, 0x13, 0x71,
	0xdf, 0xc2, 0xc7, 0xf2, 0xd8, 0xa3, 0x47, 0xd9, 0x7d, 0x11, 0x69, 0xe2, 0x65, 0x18, 0xfe, 0xef,
	0x83, 0x7f, 0xa6, 0xbe, 0xd8, 0xb7, 0x18, 0x98, 0x02, 0xd0, 0x53, 0x4c, 0x21, 0xf4, 0x63, 0x13,
	0x06, 0x08, 0x96, 0x75, 0x06, 0xcd, 0x11, 0xac, 0xce, 0x1d, 0x1c, 0x72, 0x4c, 0xc7, 0xad, 0x18,
	0xab, 0x2b, 0x07, 0xb8, 0x9e, 0xc9, 0x84, 0x8e, 0x8c, 0xf7, 0x10, 0x23, 0x1d, 0x7c, 0xfc, 0xa7,
	0x77, 0x2d, 0xe2, 0x0e, 0x91, 0xac, 0x89, 0x4c, 0xfb, 0xc4, 0xc3, 0x48, 0x1f, 0x1b, 0xcb, 0x62,
	0x36, 0x14, 0x8c, 0xeb, 0x7c, 0x96, 0x8b, 0x7b, 0x7b, 0x5f, 0x2f, 0x9e, 0x73, 0xf7, 0xf2, 0xa6,
	0x3e, 0x13, 0x88, 0xe9, 0x5f, 0xcb, 0x2d, 0x97, 0xea, 0x5a, 0xad, 0x4f, 0x9e, 0x4e, 0x73, 0x56,
	0x94, 0xed, 0xf6, 0x7b, 0xd2, 0xea, 0x30, 0x69, 0xf5, 0x3b, 0x69, 0xf5, 0x35, 0xeb, 0xea, 0x30,
	0xeb, 0xea, 0x67, 0xd6, 0xd5, 0xcb, 0xda, 0x75, 0xf2, 0x9e, 0x6c, 0xd3, 0x62, 0x47, 0x48, 0x62,
	0xb9, 0xcc, 0x07, 0x8f, 0x37, 0xa6, 0xcf, 0xf2, 0xa3, 0x8c, 0x81, 0xa3, 0x5d, 0xe4, 0xde, 0xc7,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x3a, 0x87, 0xb8, 0xfe, 0x00, 0x00, 0x00,
}

func (m *Supply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Supply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalSupply) > 0 {
		i -= len(m.TotalSupply)
		copy(dAtA[i:], m.TotalSupply)
		i = encodeVarintSupply(dAtA, i, uint64(len(m.TotalSupply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSupply(dAtA []byte, offset int, v uint64) int {
	offset -= sovSupply(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Supply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovSupply(uint64(l))
	}
	return n
}

func sovSupply(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSupply(x uint64) (n int) {
	return sovSupply(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Supply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSupply
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSupply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSupply(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSupply
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSupply
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSupply
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSupply
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSupply        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSupply          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSupply = fmt.Errorf("proto: unexpected end of group")
)
